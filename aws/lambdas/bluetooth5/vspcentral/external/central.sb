// Copyright (c) 2024, Ezurio LLC.
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// SPDX-License-Identifier:ISC
//
//******************************************************************************
//
// This app demonstrates the use of a custom GATT service that implements a
// virtual serial port (VSP) on the Sentrius IG60 with Bluetooth 5.  This app
// implements the central role, and should be deployed with another device
// that runs the corresponding peripheral role (peripheral.sb).
//
//******************************************************************************
//
//******************************************************************************

//******************************************************************************
// Definitions
//******************************************************************************
#define BLE_TX_POWER                    8 // Possible values are 8, 7, 6, 5, 4, 3, 2, 0, -4, -8, -12, -16, -20, -40dBm

#define BLE_1M_PHY                      1
#define BLE_2M_PHY                      2
#define BLE_CODED_PHY                   4

#define BLE_CONNECT_DELAY               2000    // Delay before reconnecting
#define BLE_CONNECT_TIMEOUT             30000   // Timeout when connecting

// Hardcoded GATT attributes of remote BL654 running $autorun$.dle.peripheral.sb
#define REMOTE_RX_VALUE_HANDLE          21
#define REMOTE_TX_VALUE_HANDLE          23
#define REMOTE_MODEMIN_VALUE_HANDLE     18
#define REMOTE_MODEMOUT_VALUE_HANDLE    16
#define REMOTE_TX_CCCD_HANDLE           19
#define REMOTE_MODEMOUT_CCCD_HANDLE     24

//******************************************************************************
// Global Variable Declarations
//******************************************************************************
dim rc                              //Result code
dim ConnectionID                    //Ble Connection Handle
dim Mode : Mode = 0                 //Current program mode: 0 = connecting, 1 = connected, find modem in characteristic, 2 = find modem out characteristic, 3 = find RX characteristic, 4 = find TX characteristic, 5 = find modem out descriptor, 6 = find TX descriptor, 7 = enable modem out notIFications, 8 = enable TX, 9 = enable modem in status
dim MIHandle                        //Modem In handle (IF one exists)
dim MOHandle                        //Modem Out handle (IF one exists)
dim RXHandle                        //RX handle
dim TXHandle                        //TX handle
dim MOCCCDHandle                    //Modem Out CCCD handle (IF one exists)
dim TXCCCDHandle                    //TX CCCD handle (IF one exists)
dim Val$                            //Value to write and read from characteristics
dim BufferState : BufferState = 0   //Buffer state
dim BufferFull : BufferFull = 0     //Buffer full
dim u$ : u$ = ""                    //UART read buffer
dim RecBuf$ : RecBuf$ = ""          //VSP read buffer
dim nBleMaxPacketLength             //Default maximum packet length on BL654
dim nAttributeMTU                   //Default Maximum Transmission Unit on BL654
dim nAttributeLength                //Default Attribute Data Length on BL654s
dim nHighBandwidth                  //Default High Bandwidth configuration
dim BTAddr as string

//******************************************************************************
// Initialise Global Variable
//******************************************************************************
RxHandle = REMOTE_RX_VALUE_HANDLE
TXHandle = REMOTE_TX_VALUE_HANDLE
MIHandle = REMOTE_MODEMIN_VALUE_HANDLE
MOHandle = REMOTE_MODEMOUT_VALUE_HANDLE
TXCCCDHandle = REMOTE_TX_CCCD_HANDLE
MOCCCDHandle = REMOTE_MODEMOUT_CCCD_HANDLE

nBleMaxPacketLength = 27            // The default maximum packet length on BL654 is 27
nAttributeMTU = 23                  // The default ATT_MTU on the BL654 is 23
nAttributeLength = 20               // The default attribute length on the BL654 is 20
nHighBandwidth = 0                  // The default bandwidth configuration, 1=High, 0=Low

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//------------------------------------------------------------------------------
// Register Error Handler as early as possible
//------------------------------------------------------------------------------
SUB HandlerOnErr()
    PRINT "\n ## OnErr - ";GetLastError();"\n"
ENDSUB
ONERROR NEXT HandlerOnErr

//------------------------------------------------------------------------------
// Assert to check that a resultCode is 0 which means success
//------------------------------------------------------------------------------
SUB AssertRC(rc, tag)
    IF (rc != 0) then
        PRINT "\n## Assert Error ";rc;": ";tag;"\r\n"
        STOP
    ENDIF
ENDSUB

//-------------------------------------------------------------------------
// Read the BLE Address of our target device
// The target BLE MAC Address is assumed to be broken up and stored in
// configuration addresses 3000 (1 byte), 3001 (3 bytes) & 3002 (3 bytes)
// re-combines and assigns to global BTAddr
//-------------------------------------------------------------------------
FUNCTION getTargetBLE()

    DIM rawData
    DIM asHex$, trimmed$
    btAddr = ""

    rc = NVCFGKEYGET(3000, rawData)
    AssertRC(rc, 3000)
    SPRINT #asHex$,INTEGER.H'rawData
    trimmed$ = right$(asHex$, 2)
    btAddr = btAddr + trimmed$

    rc = NVCFGKEYGET(3001, rawData)
    AssertRC(rc, 3001)
    SPRINT #asHex$,INTEGER.H'rawData
    trimmed$ = right$(asHex$, 6)
    btAddr = btAddr + trimmed$

    rc = NVCFGKEYGET(3002, rawData)
    AssertRC(rc, 3002)
    SPRINT #asHex$,INTEGER.H'rawData
    trimmed$ = right$(asHex$, 6)
    btAddr = btAddr + trimmed$

    PRINT "## Target BLE Address: ";btAddr;"\n"

ENDFUNC 0

//------------------------------------------------------------------------------
// This shows the cuttent connection parameters
//------------------------------------------------------------------------------
SUB ShowConnParms(nConnHandle)
    DIM intrvl,sprvto,slat
    rc = BleGetCurConnParms(nConnHandle,intrvl,sprvto,slat)
    print "## ConnParms :: Interval=";intrvl;",SuperTout=";sprvto;",SlaveLatency=";slat;"\n"
ENDSUB

//******************************************************************************
// Event Handlers
//******************************************************************************

//-------------------------------------------------------------------------
// Initiate connection to remote device
//-------------------------------------------------------------------------
FUNCTION StartConnect()

    DIM addr$, nMinConnInterval, nMaxConnInterval
    addr$ = BTAddr
    addr$ = StrDehexize$(addr$)

    // For default packet length, the optimum connection interval is 7500 us
    nMinConnInterval = 7500
    nMaxConnInterval = 7700

    // Connect to target device
    rc = BLECONNECT(addr$, BLE_CONNECT_TIMEOUT, nMinConnInterval, nMaxConnInterval, 500000)
    PRINT "\n## Connecting: ";StrHexize$(addr$);"\n"

ENDFUNC 1

//------------------------------------------------------------------------------
// EVUARTRX - UART data received
//------------------------------------------------------------------------------
FUNCTION HndlrUartRxVSP()

    DIM uLen, DataToSend$

    IF BufferState == 0 THEN
        //Read data that has arrived through via the UART
        uLen = UartReadN(u$, nAttributeLength)
        // Ensure that we only read nAttribureLength
        DataToSend$ = Left$(u$, nAttributeLength)

        IF uLen > 0 THEN
        rc = BLEGATTCWRITECMD(ConnectionID, RXHandle, DataToSend$)
            IF rc!= 0 THEN
                BufferState = 1
            ELSE
                StrShiftLeft(u$,uLen)
            ENDIF
        ENDIF
    ENDIF

ENDFUNC 1

//------------------------------------------------------------------------------
// EVBLE_CONN_TIMEOUT - BLE connection timed out
//------------------------------------------------------------------------------
FUNCTION HndlrConnTO()
    PRINT "## Connection attempt timed out.\n"
    // Start timer to re-establish connection
    TimerStart(0, BLE_CONNECT_DELAY, 0)
ENDFUNC 1

//------------------------------------------------------------------------------
// EVATTRWRITE - Remote characteristic written
//------------------------------------------------------------------------------
FUNCTION HndlrAttrWrite(cHndl,aHndl,nSts)

    IF (Mode == 7) THEN
        //Enable TX notIFications
        Mode = 8
        Val$ = "\01\00"
        rc = BLEGATTCWRITE(ConnectionID, TXCCCDHandle, Val$)
    ELSEIF (Mode == 8) THEN
        //Write to Modem In
        Mode = 9
        Val$ = "\01"
        BufferFull = 0
        rc = BLEGATTCWRITE(ConnectionID, MIHandle, Val$)
    ELSEIF (Mode == 9) THEN
        //Now ready to send data
        BufferFull = 0
        BufferState = 0
        Mode = 10
        u$ = ""
        RecBuf$ = ""
        // Now that everything is setup, Requst a switch to CODED PHY
        rc = BlePhySet(ConnectionID, BLE_CODED_PHY, BLE_CODED_PHY, 0)
    ELSEIF (Mode == 10) THEN
        //UART data was written
        BufferState = 0
        rc = HndlrUartRxVSP()
    ENDIF

ENDFUNC 1

//------------------------------------------------------------------------------
// EVATTRNOTIFY - Received BLE notification
//------------------------------------------------------------------------------
FUNCTION HndlrAttrNotify()

    DIM nCtx, Hndl, Data$, discard, UartSent, arc
    arc = BLEGATTCNOTIFYREAD(nCtx, Hndl, Data$, discard)
    WHILE (arc == 0)
        IF (Hndl == TXHandle) THEN
            PRINT Data$
        ENDIF
        Data$ = ""
        arc = BLEGATTCNOTIFYREAD(nCtx, Hndl, Data$, discard)
    ENDWHILE

ENDFUNC 1

//------------------------------------------------------------------------------
// EVATTRNOTIFYEX - Received BLE notification
//------------------------------------------------------------------------------
FUNCTION HndlrAttrNotifyEx(BYVAL hConn AS INTEGER, BYVAL hAttr AS INTEGER,BYVAL nType AS INTEGER, BYVAL nLength AS INTEGER,BYVAL data$ AS STRING)

    IF (hAttr == TXHandle) THEN
        // Relay data to UART
        PRINT Data$
    ENDIF
    Data$ = ""

ENDFUNC 1

//------------------------------------------------------------------------------
// EVNOTIFYBUF - Buffer for BleGattcWriteCmd has been emptied
//------------------------------------------------------------------------------
FUNCTION HndlrNtfyBuf()

    BufferState = 0
    // Buffer emptied after GattcWriteCmd, go send more data
    rc = HndlrUartRxVSP()

ENDFUNC 1

//------------------------------------------------------------------------------
// EVBLEMSG - Function to handle Ble event messages
//------------------------------------------------------------------------------
#define BLE_EVBLEMSGID_CONNECT                  0   //nCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT               1   //nCtx = connection handle
#define BLE_EVBLEMSGID_SERVICE_ERROR            4   //nCtx = resultcode
#define BLE_EVBLEMSGID_DISPLAY_PASSKEY          9   //nCtx = passcode to display
#define BLE_EVBLEMSGID_NEW_BOND                 10  //nCtx = connection handle
#define BLE_EVBLEMSGID_AUTH_KEY_REQUEST         11  //nCtx = 1 for passkey, 2 for 16 byte OOB data
#define BLE_EVBLEMSGID_HRS_NOTIFICATION_STATE   12  //nCtx = new notification state 0=off, 1=on
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE        14  //nCtx = connection handle
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL   15  //nCtx = connection handle
#define BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER    16  //nCtx = connection handle
#define BLE_EVBLEMSGID_UPDATED_BOND             17  //nCtx = connection handle
#define BLE_EVBLEMSGID_ENCRYPTED                18  //nCtx = connection handle
#define BLE_EVBLEMSGID_POWER_FAILURE_WARNING    19  //nCtx = current supply voltage
#define BLE_EVBLEMSGID_UNENCRYPTED              20  //nCtx = connection handle
#define BLE_EVBLEMSGID_DEVICENAME_WRITE         21  //nCtx = connection handle
//------------------------------------------------------------------------------
FUNCTION HndlrBleMsg(nMsgId, nCtx)

    SELECT nMsgId
    CASE BLE_EVBLEMSGID_CONNECT
        print "## Connected!\n"
        ConnectionID = nCtx
        ShowConnParms(ConnectionID)
        // Opening the GATT client only when connected to save memory
        rc = BleGattcOpen(4096, 0)
        Mode = 7    // This is checked in HndlrAttrWrite to move forward in state machine
        // Enable modem out notifications
        Val$ = "\01\00"
        rc = BLEGATTCWRITE(ConnectionID, MOCCCDHandle, Val$)

    CASE BLE_EVBLEMSGID_DISCONNECT
        PRINT " ## Disconnected!\n"
        BleGattcClose()
        // Start timer to re-establish connection
        TimerStart(0, BLE_CONNECT_DELAY, 0)

    CASE BLE_EVBLEMSGID_CONN_PARMS_UPDATE
        ShowConnParms(ConnectionID)

    CASE ELSE
    ENDSELECT

ENDFUNC 1

//==============================================================================
// EVBLE_PHY_UPDATED - This handler is called when the BLE PHY is changed
//==============================================================================
FUNCTION  HandlerPhyChngd(BYVAL hConn, BYVAL nStatus, BYVAL PhyTx, BYVAL PhyRx)
    PRINT "## PHY Changed: Status: ";integer.h' nStatus;" - PhyTx=";PhyTx;" PhyRx =";PhyRx;"\n"
ENDFUNC 1

//==============================================================================
// EVBLE_PHY_REQUEST - This handler is called when the BLE PHY is changed
//==============================================================================
FUNCTION HandlerPhyReq(BYVAL hConn, BYVAL PhyTx, BYVAL PhyRx)
    PRINT "## PHY Request - PhyTx=";PhyTx;" PhyRx =";PhyRx;"\n"
    // Accept the PHY requested by the remote device
    rc = BlePhySet(hConn, PhyTx, PhyRx, 0)
ENDFUNC 1

//******************************************************************************
// Start up code from here -equivalent to main() in a 'C' application
//******************************************************************************

// Close UART and open at 115200 baud rate
UartClose()
rc = UartOpen(115200, 2048, 2048, "CN81H")

// Get the target BT Address from non-volatile storage
rc = getTargetBLE()

// Set TX power
rc = BleTxPowerSet(BLE_TX_POWER)

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
// UART events
ONEVENT EVUARTRX            CALL HndlrUartRxVSP
// Timer events
ONEVENT EVTMR0              CALL StartConnect
// Generic BLE events
ONEVENT EVATTRWRITE         CALL HndlrAttrWrite
ONEVENT EVBLEMSG            CALL HndlrBleMsg
ONEVENT EVBLE_CONN_TIMEOUT  CALL HndlrConnTO
ONEVENT EVATTRNOTIFY        CALL HndlrAttrNotify        // Used if AT+CFG 213=0
ONEVENT EVATTRNOTIFYEX      CALL HndlrAttrNotifyEx      // Used if AT+CFG 213=1
ONEVENT EVNOTIFYBUF         CALL HndlrNtfyBuf
// BLE PHY
OnEvent EVBLE_PHY_UPDATED  CALL HandlerPhyChngd
OnEvent EVBLE_PHY_REQUEST  CALL HandlerPhyReq

// Start timer to establish initial connection
TimerStart(0, BLE_CONNECT_DELAY, 0)

//------------------------------------------------------------------------------
// Wait for a synchronous event.
//------------------------------------------------------------------------------
WAITEVENT
